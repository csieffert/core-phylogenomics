#!/usr/bin/env perl

package Stage::RearrangeSNPMatrix;
use Stage;
use Bio::Phylo::IO;
use Bio::Phylo::Forest::Tree;
@ISA = qw(Stage);

use strict;
use warnings;

sub new
{
        my ($proto, $job_properties, $logger) = @_;
        my $class = ref($proto) || $proto;
        my $self = $class->SUPER::new($job_properties, $logger);

        bless($self,$class);

	$self->{'_stage_name'} = 'rearrange-snp-matrix';

        return $self;
}

#submodule to re-root the phylogenomic tree with the indicated strain.
sub reRootTree
{
	my ($self, $input_taxa_tree, $newRootStrain) = @_;
	
	my $newRoot = "'".$newRootStrain."'";
	foreach my $node ( @{ $input_taxa_tree->get_entities } ) {
       if($node->get_name() eq $newRoot)
       {
          $node->set_root_below();	
       }
    }
}

#submodule to sort and display the phylogenomic tree in ascending order.
sub sortAscending
{
	my ($self, $input_taxa_tree, $ref_name) = @_;
}

#submodule to sort and display the phylogenomic tree in descending order.
sub sortDescending
{
	my ($self, $input_taxa_tree, $ref_name) = @_;
}

#submodule to rearrange the entries in matrix.csv to match the new phylogenetic ordering
sub editMatrixCsv
{
	my ($self, $input_taxa_tree, $ref_name) = @_;
}

#Parses the input pseudoalign.phy_phyml_tree.txt files into a tree of Bio::Phylo objects.
#input: pseudoalign.phy_phyml_tree.txt file describing unsorted phylogeny.
#output: Tree of Bio::Phylo objects describing the phylogeny.
sub parseInput
{
	my ($self, $input_phylogeny) = @_;
	
}

sub execute
{	
	my ($self) = @_;
	my $logger = $self->{'_logger'};
	my $stage = $self->get_stage_name;

	my $job_properties = $self->{'_job_properties'};
	my $taxa_file = $job_properties->get_property('input_taxa_dir');
	$taxa_file .= '/pseudoalign.phy_phyml_tree.txt';
	my $taxa ={};
	bless($taxa, "Bio::Phylo::Forest::Tree");
		
	#parse the newick format phylogeny generated by phyml into a Bio::Phylo::Forest::Tree object
	$taxa = Bio::Phylo::IO->parse(
    	'-file'   => $taxa_file,
    	'-format'   => 'newick'
 	)->first;
 	 
 	#reroot the tree if requested by user:
 	$self->reRootTree($taxa, $job_properties->get_property('root_strain')) if exists $job_properties->get_property('root_strain');
 	
 	open(my $taxaout, '>camoutput.txt') or die "Could not open output file: $!";
 	print $taxaout $taxa->to_nexus( -header => 1, -links => 1 );
 	close($taxaout);
}



